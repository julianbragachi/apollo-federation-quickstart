"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloOpenTelemetry = void 0;
const api_1 = require("@opentelemetry/api");
const exporter_trace_otlp_http_1 = require("@opentelemetry/exporter-trace-otlp-http");
const exporter_zipkin_1 = require("@opentelemetry/exporter-zipkin");
const instrumentation_1 = require("@opentelemetry/instrumentation");
const instrumentation_express_1 = require("@opentelemetry/instrumentation-express");
const instrumentation_graphql_1 = require("@opentelemetry/instrumentation-graphql");
const instrumentation_http_1 = require("@opentelemetry/instrumentation-http");
const resources_1 = require("@opentelemetry/resources");
const sdk_trace_base_1 = require("@opentelemetry/sdk-trace-base");
const sdk_trace_node_1 = require("@opentelemetry/sdk-trace-node");
var GraphNodeType;
(function (GraphNodeType) {
    GraphNodeType["Router"] = "router";
    GraphNodeType["Subgraph"] = "subgraph";
})(GraphNodeType || (GraphNodeType = {}));
var ExporterType;
(function (ExporterType) {
    ExporterType["Console"] = "console";
    ExporterType["Zipkin"] = "zipkin";
    ExporterType["Collector"] = "collector";
})(ExporterType || (ExporterType = {}));
class ApolloOpenTelemetry {
    constructor(props) {
        this.props = props;
        if (props.debug) {
            api_1.diag.setLogger(new api_1.DiagConsoleLogger(), api_1.DiagLogLevel.DEBUG);
        }
    }
    setupInstrumentation() {
        var _a, _b, _c, _d, _e;
        const name = (_a = this.props.name) !== null && _a !== void 0 ? _a : this.props.type;
        const resource = new resources_1.Resource({
            'service.name': name,
        });
        const instrumentations = [];
        switch (this.props.type) {
            case GraphNodeType.Router:
                instrumentations.push(new instrumentation_http_1.HttpInstrumentation());
                instrumentations.push(new instrumentation_express_1.ExpressInstrumentation());
                break;
            case GraphNodeType.Subgraph:
                instrumentations.push(new instrumentation_http_1.HttpInstrumentation());
                instrumentations.push(new instrumentation_express_1.ExpressInstrumentation());
                instrumentations.push(new instrumentation_graphql_1.GraphQLInstrumentation({
                    allowValues: true,
                    depth: 10,
                }));
                break;
            default:
                throw new Error(`unknown graph node type: '${this.props.type}'`);
        }
        (0, instrumentation_1.registerInstrumentations)({
            instrumentations: [instrumentations],
        });
        const provider = new sdk_trace_node_1.NodeTracerProvider({
            resource: resources_1.Resource.default().merge(resource),
        });
        const exporter = this.props.exporter;
        const exporterType = (_b = exporter === null || exporter === void 0 ? void 0 : exporter.type) !== null && _b !== void 0 ? _b : ExporterType.Console;
        const host = (_c = exporter === null || exporter === void 0 ? void 0 : exporter.host) !== null && _c !== void 0 ? _c : 'localhost';
        switch (exporterType) {
            case ExporterType.Console:
                const consoleExporter = new sdk_trace_base_1.ConsoleSpanExporter();
                provider.addSpanProcessor(new sdk_trace_base_1.SimpleSpanProcessor(consoleExporter));
                break;
            case ExporterType.Zipkin:
                const zipkinPort = (_d = exporter === null || exporter === void 0 ? void 0 : exporter.port) !== null && _d !== void 0 ? _d : '9411';
                const zipkinExporter = new exporter_zipkin_1.ZipkinExporter({
                    url: `http://${host}:${zipkinPort}/api/v2/spans`,
                });
                provider.addSpanProcessor(new sdk_trace_base_1.SimpleSpanProcessor(zipkinExporter));
                break;
            case ExporterType.Collector:
                const collectorPort = (_e = exporter === null || exporter === void 0 ? void 0 : exporter.port) !== null && _e !== void 0 ? _e : '4318';
                const collectorTraceExporter = new exporter_trace_otlp_http_1.OTLPTraceExporter({
                    url: `http://${host}:${collectorPort}/v1/traces`,
                });
                provider.addSpanProcessor(new sdk_trace_base_1.BatchSpanProcessor(collectorTraceExporter, {
                    maxQueueSize: 1000,
                    scheduledDelayMillis: 1000,
                }));
                break;
            default:
                throw new Error(`unknown exporter type: '${exporterType}'`);
        }
        provider.register();
    }
}
exports.ApolloOpenTelemetry = ApolloOpenTelemetry;
//# sourceMappingURL=data:application/json;base64,